---
openapi: "3.0.2"
info:
  title: "LangChainPlus"
  version: "0.1.0"
servers:
  - url: https://smith.langchain.com/v1
paths:
  /sessions/{session_id}:
    get:
      tags:
        - "tracer-sessions"
      summary: "Read Tracer Session"
      description: "Get a specific session."
      operationId: "read_tracer_session"
      parameters:
        - required: true
          schema:
            title: "Session Id"
            type: "string"
            format: "uuid"
          name: "session_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TracerSession"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "tracer-sessions"
      summary: "Delete Tracer Session"
      description: "Delete a specific session."
      operationId: "delete_tracer_session"
      parameters:
        - required: true
          schema:
            title: "Session Id"
            type: "string"
            format: "uuid"
          name: "session_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /sessions:
    get:
      tags:
        - "tracer-sessions"
      summary: "Read Tracer Sessions"
      description: "Get all sessions."
      operationId: "read_tracer_sessions"
      parameters:
        - required: false
          schema:
            title: "Reference Free"
            type: "boolean"
          name: "reference_free"
          in: "query"
        - required: false
          schema:
            title: "Reference Dataset"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "reference_dataset"
          in: "query"
        - required: false
          schema:
            title: "Id"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "id"
          in: "query"
        - required: false
          schema:
            title: "Name"
            type: "string"
          name: "name"
          in: "query"
        - required: false
          schema:
            title: "Name Contains"
            type: "string"
          name: "name_contains"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Tracer Sessions Sessions Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/TracerSession"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "tracer-sessions"
      summary: "Create Tracer Session"
      description: "Create a new session."
      operationId: "create_tracer_session"
      parameters:
        - required: false
          schema:
            title: "Upsert"
            type: "boolean"
            default: false
          name: "upsert"
          in: "query"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TracerSessionCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TracerSessionWithoutVirtualFields"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /api-key:
    get:
      tags:
        - "api-key"
      summary: "Get Api Keys"
      description: "Get the current tenant's API keys"
      operationId: "get_api_keys"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Get Api Keys Api Key Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/APIKeyGetResponse"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "api-key"
      summary: "Generate Api Key"
      description: "Generate an api key for the user"
      operationId: "generate_api_key"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyCreateResponse"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /api-key/{api_key_id}:
    delete:
      tags:
        - "api-key"
      summary: "Delete Api Key"
      description: "Delete an api key for the user"
      operationId: "delete_api_key"
      parameters:
        - required: true
          schema:
            title: "Api Key Id"
            type: "string"
            format: "uuid"
          name: "api_key_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyGetResponse"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /examples/{example_id}:
    get:
      tags:
        - "examples"
      summary: "Read Example"
      description: "Get a specific example."
      operationId: "read_example"
      parameters:
        - required: true
          schema:
            title: "Example Id"
            type: "string"
            format: "uuid"
          name: "example_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "examples"
      summary: "Delete Example"
      description: "Delete a specific example."
      operationId: "delete_example"
      parameters:
        - required: true
          schema:
            title: "Example Id"
            type: "string"
            format: "uuid"
          name: "example_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    patch:
      tags:
        - "examples"
      summary: "Update Example"
      description: "Update a specific example."
      operationId: "update_example"
      parameters:
        - required: true
          schema:
            title: "Example Id"
            type: "string"
            format: "uuid"
          name: "example_id"
          in: "path"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleUpdate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /examples:
    get:
      tags:
        - "examples"
      summary: "Read Examples"
      description: "Get all examples by query params"
      operationId: "read_examples"
      parameters:
        - required: false
          schema:
            title: "Id"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "id"
          in: "query"
        - required: false
          schema:
            title: "Dataset"
            type: "string"
            format: "uuid"
          name: "dataset"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Examples Examples Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/Example"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "examples"
      summary: "Create Example"
      description: "Create a new example."
      operationId: "create_example"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "examples"
      summary: "Delete Examples"
      description: "Delete a specific set of examples."
      operationId: "delete_examples"
      parameters:
        - required: true
          schema:
            title: "Example Ids"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "example_ids"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /examples/bulk:
    post:
      tags:
        - "examples"
      summary: "Create Examples"
      description: "Create a new example."
      operationId: "create_examples"
      requestBody:
        content:
          application/json:
            schema:
              title: "Examples"
              type: "array"
              items:
                $ref: "#/components/schemas/ExampleCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Create Examples Examples Bulk Post"
                type: "array"
                items:
                  $ref: "#/components/schemas/Example"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /datasets/{dataset_id}:
    get:
      tags:
        - "datasets"
      summary: "Read Dataset"
      description: "Get a specific dataset."
      operationId: "read_dataset"
      parameters:
        - required: true
          schema:
            title: "Dataset Id"
            type: "string"
            format: "uuid"
          name: "dataset_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "datasets"
      summary: "Delete Dataset"
      description: "Delete a specific dataset."
      operationId: "delete_dataset"
      parameters:
        - required: true
          schema:
            title: "Dataset Id"
            type: "string"
            format: "uuid"
          name: "dataset_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    patch:
      tags:
        - "datasets"
      summary: "Update Dataset"
      description: "Update a specific dataset."
      operationId: "update_dataset"
      parameters:
        - required: true
          schema:
            title: "Dataset Id"
            type: "string"
            format: "uuid"
          name: "dataset_id"
          in: "path"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetUpdate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /datasets:
    get:
      tags:
        - "datasets"
      summary: "Read Datasets"
      description: "Get all datasets by query params and owner."
      operationId: "read_datasets"
      parameters:
        - required: false
          schema:
            title: "Id"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "id"
          in: "query"
        - required: false
          schema:
            $ref: "#/components/schemas/DataType"
          name: "data_type"
          in: "query"
        - required: false
          schema:
            title: "Name"
            type: "string"
          name: "name"
          in: "query"
        - required: false
          schema:
            title: "Name Contains"
            type: "string"
          name: "name_contains"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Datasets Datasets Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/Dataset"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "datasets"
      summary: "Create Dataset"
      description: "Create a new dataset."
      operationId: "create_dataset"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatasetCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /datasets/upload:
    post:
      tags:
        - "datasets"
      summary: "Upload Csv Dataset"
      description: "Create a new dataset from a CSV file."
      operationId: "upload_csv_dataset"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Body_upload_csv_dataset_datasets_upload_post"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /datasets/{dataset_id}/openai:
    get:
      tags:
        - "datasets"
      summary: "Download Dataset Openai"
      description: "Download a dataset as OpenAI Jsonl format."
      operationId: "download_dataset_openai"
      parameters:
        - required: true
          schema:
            title: "Dataset Id"
            type: "string"
            format: "uuid"
          name: "dataset_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /datasets/{dataset_id}/csv:
    get:
      tags:
        - "datasets"
      summary: "Download Dataset Csv"
      description: "Download a dataset as OpenAI Jsonl format."
      operationId: "download_dataset_csv"
      parameters:
        - required: true
          schema:
            title: "Dataset Id"
            type: "string"
            format: "uuid"
          name: "dataset_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /runs/{run_id}:
    get:
      tags:
        - "run"
      summary: "Read Run"
      description: "Get a specific run."
      operationId: "read_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "run"
      summary: "Delete Run"
      description: "Delete a run."
      operationId: "delete_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    patch:
      tags:
        - "run"
      summary: "Update Run"
      description: "Update a run."
      operationId: "update_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunUpdateSchema"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /runs/{run_id}/share:
    get:
      tags:
        - "run"
      summary: "Read Run Share State"
      description: "Get the state of sharing of a run."
      operationId: "read_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunShareSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    put:
      tags:
        - "run"
      summary: "Share Run"
      description: "Share a run."
      operationId: "share_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunShareSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "run"
      summary: "Unshare Run"
      description: "Unshare a run."
      operationId: "unshare_run"
      parameters:
        - required: true
          schema:
            title: "Run Id"
            type: "string"
            format: "uuid"
          name: "run_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /runs:
    get:
      tags:
        - "run"
      summary: "Read Runs"
      description: "Get all runs by query params."
      operationId: "read_runs"
      parameters:
        - required: false
          schema:
            title: "Id"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "id"
          in: "query"
        - required: false
          schema:
            title: "Parent Run"
            type: "string"
            format: "uuid"
          name: "parent_run"
          in: "query"
        - required: false
          schema:
            $ref: "#/components/schemas/RunTypeEnum"
          name: "run_type"
          in: "query"
        - required: false
          schema:
            title: "Session"
            type: "string"
            format: "uuid"
          name: "session"
          in: "query"
        - required: false
          schema:
            title: "Reference Example"
            type: "string"
            format: "uuid"
          name: "reference_example"
          in: "query"
        - required: false
          schema:
            title: "Dataset"
            type: "string"
            format: "uuid"
          name: "dataset"
          in: "query"
        - required: false
          schema:
            title: "Execution Order"
            type: "integer"
          name: "execution_order"
          in: "query"
        - required: false
          schema:
            title: "Start Time"
            type: "string"
            format: "date-time"
          name: "start_time"
          in: "query"
        - required: false
          schema:
            title: "End Time"
            type: "string"
            format: "date-time"
          name: "end_time"
          in: "query"
        - required: false
          schema:
            title: "Error"
            type: "boolean"
          name: "error"
          in: "query"
        - required: false
          schema:
            title: "Query"
            type: "string"
          name: "query"
          in: "query"
        - required: false
          schema:
            title: "Filter"
            type: "string"
          name: "filter"
          in: "query"
        - required: false
          schema:
            title: "Order"
            type: "array"
            items:
              type: "string"
          name: "order"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Runs Runs Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/RunSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "run"
      summary: "Create Run"
      description: "Create a new run."
      operationId: "create_run"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunCreateSchema"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "run"
      summary: "Delete Runs"
      description: "Delete a specific set of runs."
      operationId: "delete_runs"
      parameters:
        - required: true
          schema:
            title: "Run Ids"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "run_ids"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /run-manifests/{run_manifest_id}:
    get:
      tags:
        - "run-manifest"
      summary: "Read Run Manifest"
      description: "Get a specific run manifest."
      operationId: "read_run_manifest"
      parameters:
        - required: true
          schema:
            title: "Run Manifest Id"
            type: "string"
            format: "uuid"
          name: "run_manifest_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunManifestSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tasks:
    get:
      tags:
        - "task"
      summary: "List Tasks"
      operationId: "list_tasks"
      parameters:
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response List Tasks Tasks Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/Task"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tasks/schedule:
    post:
      tags:
        - "task"
      summary: "Schedule Task"
      operationId: "schedule_task"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPayload"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskCreatedResponse"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /feedback/{feedback_id}:
    get:
      tags:
        - "feedback"
      summary: "Read Feedback"
      description: "Get a specific feedback."
      operationId: "read_feedback"
      parameters:
        - required: true
          schema:
            title: "Feedback Id"
            type: "string"
            format: "uuid"
          name: "feedback_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    delete:
      tags:
        - "feedback"
      summary: "Delete Feedback"
      description: "Delete a feedback."
      operationId: "delete_feedback"
      parameters:
        - required: true
          schema:
            title: "Feedback Id"
            type: "string"
            format: "uuid"
          name: "feedback_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    patch:
      tags:
        - "feedback"
      summary: "Update Feedback"
      description: "Create a new feedback."
      operationId: "update_feedback"
      parameters:
        - required: true
          schema:
            title: "Feedback Id"
            type: "string"
            format: "uuid"
          name: "feedback_id"
          in: "path"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackUpdateSchema"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /feedback:
    get:
      tags:
        - "feedback"
      summary: "Read Feedbacks"
      description: "List all Feedback by query params."
      operationId: "read_feedbacks"
      parameters:
        - required: false
          schema:
            title: "Run"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "run"
          in: "query"
        - required: false
          schema:
            title: "Key"
            type: "array"
            items:
              type: "string"
          name: "key"
          in: "query"
        - required: false
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/SourceType"
          name: "source"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "User"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "user"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Feedbacks Feedback Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/FeedbackSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "feedback"
      summary: "Create Feedback"
      description: "Create a new feedback."
      operationId: "create_feedback"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackCreateSchema"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /public/{share_token}/runs:
    get:
      tags:
        - "public"
      summary: "Read Shared Runs"
      description: "Get run by ids or the shared run if not specifed."
      operationId: "read_shared_runs"
      parameters:
        - required: true
          schema:
            title: "Share Token"
            type: "string"
            format: "uuid"
          name: "share_token"
          in: "path"
        - required: false
          schema:
            title: "Id"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "id"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Shared Runs Public  Share Token  Runs Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/RunPublicSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /public/{share_token}/feedbacks:
    get:
      tags:
        - "public"
      summary: "Read Shared Feedbacks"
      operationId: "read_shared_feedbacks"
      parameters:
        - required: true
          schema:
            title: "Share Token"
            type: "string"
            format: "uuid"
          name: "share_token"
          in: "path"
        - required: false
          schema:
            title: "Run"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "run"
          in: "query"
        - required: false
          schema:
            title: "Key"
            type: "array"
            items:
              type: "string"
          name: "key"
          in: "query"
        - required: false
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/SourceType"
          name: "source"
          in: "query"
        - required: false
          schema:
            title: "Limit"
            maximum: 100.0
            minimum: 1.0
            type: "integer"
            default: 100
          name: "limit"
          in: "query"
        - required: false
          schema:
            title: "Offset"
            minimum: 0.0
            type: "integer"
            default: 0
          name: "offset"
          in: "query"
        - required: false
          schema:
            title: "User"
            type: "array"
            items:
              type: "string"
              format: "uuid"
          name: "user"
          in: "query"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response Read Shared Feedbacks Public  Share Token  Feedbacks\
                  \ Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/FeedbackSchema"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /tenants:
    get:
      tags:
        - "tenant"
      summary: "List Tenants"
      description: "Get all tenants visible to this auth"
      operationId: "list_tenants"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response List Tenants Tenants Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/Tenant"
      security:
        - Bearer Auth: []
    post:
      tags:
        - "tenant"
      summary: "Create Tenant"
      description: "Create a new tenant."
      operationId: "create_tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Bearer Auth: []
  /tenants/pending:
    get:
      tags:
        - "tenant"
      summary: "List Pending Tenant Invites"
      description: "Get all tenants visible to this auth"
      operationId: "list_pending_tenant_invites"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                title: "Response List Pending Tenant Invites Tenants Pending Get"
                type: "array"
                items:
                  $ref: "#/components/schemas/Tenant"
      security:
        - Bearer Auth: []
  /tenants/pending/{id}:
    delete:
      tags:
        - "tenant"
      summary: "Delete Pending Tenant Invite"
      operationId: "delete_pending_tenant_invite"
      parameters:
        - required: true
          schema:
            title: "Id"
            type: "string"
            format: "uuid"
          name: "id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Bearer Auth: []
  /tenants/pending/{tenant_id}/claim:
    post:
      tags:
        - "tenant"
      summary: "Claim Pending Tenant Invite"
      operationId: "claim_pending_tenant_invite"
      parameters:
        - required: true
          schema:
            title: "Tenant Id"
            type: "string"
            format: "uuid"
          name: "tenant_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Bearer Auth: []
  /tenants/current/claim:
    post:
      tags:
        - "tenant"
      summary: "Claim Waitlist Skip Code"
      description: "Claim an invite code."
      operationId: "claim_waitlist_skip_code"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantClaimInviteCode"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/claim:
    post:
      tags:
        - "tenant"
      summary: "Claim Waitlist Skip Code"
      description: "Claim an invite code."
      operationId: "claim_waitlist_skip_code"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantClaimInviteCode"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      deprecated: true
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/current/stats:
    get:
      tags:
        - "tenant"
      summary: "Get Current Tenant Stats"
      operationId: "get_current_tenant_stats"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantStats"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/stats:
    get:
      tags:
        - "tenant"
      summary: "Get Current Tenant Stats"
      operationId: "get_current_tenant_stats"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantStats"
      deprecated: true
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/current/members:
    get:
      tags:
        - "tenant"
      summary: "Get Current Tenant Members"
      operationId: "get_current_tenant_members"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantMembers"
      security:
        - Tenant ID: []
        - Bearer Auth: []
    post:
      tags:
        - "tenant"
      summary: "Add Member To Current Tenant"
      operationId: "add_member_to_current_tenant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PendingIdentityCreate"
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PendingIdentity"
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/current/members/{identity_id}:
    delete:
      tags:
        - "tenant"
      summary: "Delete Current Tenant Member"
      operationId: "delete_current_tenant_member"
      parameters:
        - required: true
          schema:
            title: "Identity Id"
            type: "string"
            format: "uuid"
          name: "identity_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /tenants/current/members/{identity_id}/pending:
    delete:
      tags:
        - "tenant"
      summary: "Delete Current Tenant Pending Member"
      operationId: "delete_current_tenant_pending_member"
      parameters:
        - required: true
          schema:
            title: "Identity Id"
            type: "string"
            format: "uuid"
          name: "identity_id"
          in: "path"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
        "422":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - Tenant ID: []
        - Bearer Auth: []
  /ok:
    get:
      summary: "Ok"
      operationId: "ok"
      responses:
        "200":
          description: "Successful Response"
          content:
            application/json:
              schema: {}
components:
  schemas:
    APIFeedbackSource:
      title: "APIFeedbackSource"
      type: "object"
      properties:
        type:
          title: "Type"
          type: "string"
          default: "api"
        metadata:
          title: "Metadata"
          type: "object"
      description: "API feedback source."
    APIKeyCreateResponse:
      title: "APIKeyCreateResponse"
      required:
        - "id"
        - "short_key"
        - "key"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        short_key:
          title: "Short Key"
          type: "string"
        key:
          title: "Key"
          type: "string"
      description: "API key POST schema."
    APIKeyGetResponse:
      title: "APIKeyGetResponse"
      required:
        - "id"
        - "short_key"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        short_key:
          title: "Short Key"
          type: "string"
      description: "API key GET schema."
    AppFeedbackSource:
      title: "AppFeedbackSource"
      type: "object"
      properties:
        type:
          title: "Type"
          type: "string"
          default: "app"
        metadata:
          title: "Metadata"
          type: "object"
      description: "Feedback from the LangChainPlus App."
    Body_upload_csv_dataset_datasets_upload_post:
      title: "Body_upload_csv_dataset_datasets_upload_post"
      required:
        - "file"
        - "input_keys"
      type: "object"
      properties:
        file:
          title: "File"
          type: "string"
          format: "binary"
        name:
          title: "Name"
          type: "string"
        data_type:
          allOf:
            - $ref: "#/components/schemas/DataType"
          default: "kv"
        input_keys:
          title: "Input Keys"
          type: "array"
          items:
            type: "string"
        output_keys:
          title: "Output Keys"
          type: "array"
          items:
            type: "string"
        description:
          title: "Description"
          type: "string"
    DataType:
      title: "DataType"
      enum:
        - "kv"
        - "llm"
        - "chat"
      type: "string"
      description: "Enum for dataset data types."
    Dataset:
      title: "Dataset"
      required:
        - "name"
        - "id"
        - "tenant_id"
        - "example_count"
        - "session_count"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        description:
          title: "Description"
          type: "string"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        data_type:
          allOf:
            - $ref: "#/components/schemas/DataType"
          default: "kv"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        example_count:
          title: "Example Count"
          type: "integer"
        session_count:
          title: "Session Count"
          type: "integer"
        last_session_start_time:
          title: "Last Session Start Time"
          type: "string"
          format: "date-time"
      description: "Dataset schema."
    DatasetCreate:
      title: "DatasetCreate"
      required:
        - "name"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        description:
          title: "Description"
          type: "string"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        data_type:
          allOf:
            - $ref: "#/components/schemas/DataType"
          default: "kv"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
      description: "Create class for Dataset."
    DatasetUpdate:
      title: "DatasetUpdate"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        description:
          title: "Description"
          type: "string"
      description: "Update class for Dataset."
    Example:
      title: "Example"
      required:
        - "inputs"
        - "dataset_id"
        - "id"
        - "name"
        - "run_count"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        inputs:
          title: "Inputs"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        dataset_id:
          title: "Dataset Id"
          type: "string"
          format: "uuid"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        name:
          title: "Name"
          type: "string"
        run_count:
          title: "Run Count"
          type: "integer"
        run_ids:
          title: "Run Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
      description: "Example schema."
    ExampleCreate:
      title: "ExampleCreate"
      required:
        - "inputs"
        - "dataset_id"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        inputs:
          title: "Inputs"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        dataset_id:
          title: "Dataset Id"
          type: "string"
          format: "uuid"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
      description: "Create class for Example."
    ExampleUpdate:
      title: "ExampleUpdate"
      type: "object"
      properties:
        dataset_id:
          title: "Dataset Id"
          type: "string"
          format: "uuid"
        inputs:
          title: "Inputs"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
      description: "Update class for Example."
    FeedbackCreateSchema:
      title: "FeedbackCreateSchema"
      required:
        - "run_id"
        - "key"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        modified_at:
          title: "Modified At"
          type: "string"
          format: "date-time"
        run_id:
          title: "Run Id"
          type: "string"
          format: "uuid"
        key:
          title: "Key"
          type: "string"
        score:
          title: "Score"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
        value:
          title: "Value"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "string"
            - type: "object"
        comment:
          title: "Comment"
          type: "string"
        correction:
          title: "Correction"
          type: "object"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        feedback_source:
          title: "Feedback Source"
          anyOf:
            - $ref: "#/components/schemas/AppFeedbackSource"
            - $ref: "#/components/schemas/APIFeedbackSource"
            - $ref: "#/components/schemas/ModelFeedbackSource"
      description: "Schema used for creating feedback."
    FeedbackSchema:
      title: "FeedbackSchema"
      required:
        - "run_id"
        - "key"
        - "id"
      type: "object"
      properties:
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        modified_at:
          title: "Modified At"
          type: "string"
          format: "date-time"
        run_id:
          title: "Run Id"
          type: "string"
          format: "uuid"
        key:
          title: "Key"
          type: "string"
        score:
          title: "Score"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
        value:
          title: "Value"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "string"
            - type: "object"
        comment:
          title: "Comment"
          type: "string"
        correction:
          title: "Correction"
          type: "object"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        feedback_source:
          $ref: "#/components/schemas/FeedbackSource"
      description: "Schema for getting feedback."
    FeedbackSource:
      title: "FeedbackSource"
      required:
        - "type"
      type: "object"
      properties:
        type:
          title: "Type"
          type: "string"
        metadata:
          title: "Metadata"
          type: "object"
        user_id:
          title: "User Id"
          type: "string"
          format: "uuid"
      description: "The feedback source loaded from the database."
    FeedbackUpdateSchema:
      title: "FeedbackUpdateSchema"
      type: "object"
      properties:
        score:
          title: "Score"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
        value:
          title: "Value"
          anyOf:
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "string"
            - type: "object"
        comment:
          title: "Comment"
          type: "string"
        correction:
          title: "Correction"
          type: "object"
      description: "Schema used for updating feedback"
    HTTPValidationError:
      title: "HTTPValidationError"
      type: "object"
      properties:
        detail:
          title: "Detail"
          type: "array"
          items:
            $ref: "#/components/schemas/ValidationError"
    ModelFeedbackSource:
      title: "ModelFeedbackSource"
      type: "object"
      properties:
        type:
          title: "Type"
          type: "string"
          default: "model"
        metadata:
          title: "Metadata"
          type: "object"
      description: "Model feedback source."
    PendingIdentity:
      title: "PendingIdentity"
      required:
        - "email"
        - "id"
        - "tenant_id"
        - "created_at"
      type: "object"
      properties:
        email:
          title: "Email"
          type: "string"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
    PendingIdentityCreate:
      title: "PendingIdentityCreate"
      required:
        - "email"
      type: "object"
      properties:
        email:
          title: "Email"
          type: "string"
    RunCreateSchema:
      title: "RunCreateSchema"
      required:
        - "name"
        - "run_type"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        inputs:
          title: "Inputs"
          type: "object"
        run_type:
          $ref: "#/components/schemas/RunTypeEnum"
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        end_time:
          title: "End Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        error:
          title: "Error"
          type: "string"
        execution_order:
          title: "Execution Order"
          minimum: 1.0
          type: "integer"
          default: 1
        serialized:
          title: "Serialized"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        parent_run_id:
          title: "Parent Run Id"
          type: "string"
          format: "uuid"
        manifest_id:
          title: "Manifest Id"
          type: "string"
          format: "uuid"
        events:
          title: "Events"
          type: "array"
          items:
            type: "object"
        tags:
          title: "Tags"
          type: "array"
          items:
            type: "string"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        session_id:
          title: "Session Id"
          type: "string"
          format: "uuid"
        session_name:
          title: "Session Name"
          type: "string"
        child_runs:
          title: "Child Runs"
          type: "array"
          items:
            $ref: "#/components/schemas/RunCreateSchema"
        reference_example_id:
          title: "Reference Example Id"
          type: "string"
          format: "uuid"
      description: "Create class for a Run object."
    RunManifestSchema:
      title: "RunManifestSchema"
      required:
        - "id"
        - "manifest"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        manifest:
          title: "Manifest"
          type: "object"
    RunPublicSchema:
      title: "RunPublicSchema"
      required:
        - "name"
        - "run_type"
        - "id"
        - "status"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        inputs:
          title: "Inputs"
          type: "object"
        run_type:
          $ref: "#/components/schemas/RunTypeEnum"
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        end_time:
          title: "End Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        error:
          title: "Error"
          type: "string"
        execution_order:
          title: "Execution Order"
          minimum: 1.0
          type: "integer"
          default: 1
        serialized:
          title: "Serialized"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        parent_run_id:
          title: "Parent Run Id"
          type: "string"
          format: "uuid"
        manifest_id:
          title: "Manifest Id"
          type: "string"
          format: "uuid"
        events:
          title: "Events"
          type: "array"
          items:
            type: "object"
        tags:
          title: "Tags"
          type: "array"
          items:
            type: "string"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        status:
          title: "Status"
          type: "string"
        child_run_ids:
          title: "Child Run Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
        parent_run_ids:
          title: "Parent Run Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
        feedback_stats:
          title: "Feedback Stats"
          type: "object"
          additionalProperties:
            type: "object"
        reference_example_id:
          title: "Reference Example Id"
          type: "string"
          format: "uuid"
    RunSchema:
      title: "RunSchema"
      required:
        - "name"
        - "run_type"
        - "id"
        - "status"
        - "session_id"
        - "app_path"
      type: "object"
      properties:
        name:
          title: "Name"
          type: "string"
        inputs:
          title: "Inputs"
          type: "object"
        run_type:
          $ref: "#/components/schemas/RunTypeEnum"
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        end_time:
          title: "End Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        error:
          title: "Error"
          type: "string"
        execution_order:
          title: "Execution Order"
          minimum: 1.0
          type: "integer"
          default: 1
        serialized:
          title: "Serialized"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        parent_run_id:
          title: "Parent Run Id"
          type: "string"
          format: "uuid"
        manifest_id:
          title: "Manifest Id"
          type: "string"
          format: "uuid"
        events:
          title: "Events"
          type: "array"
          items:
            type: "object"
        tags:
          title: "Tags"
          type: "array"
          items:
            type: "string"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        status:
          title: "Status"
          type: "string"
        child_run_ids:
          title: "Child Run Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
        parent_run_ids:
          title: "Parent Run Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
        feedback_stats:
          title: "Feedback Stats"
          type: "object"
          additionalProperties:
            type: "object"
        reference_example_id:
          title: "Reference Example Id"
          type: "string"
          format: "uuid"
        session_id:
          title: "Session Id"
          type: "string"
          format: "uuid"
        app_path:
          title: "App Path"
          type: "string"
      description: "Run schema."
    RunShareSchema:
      title: "RunShareSchema"
      required:
        - "run_id"
        - "share_token"
      type: "object"
      properties:
        run_id:
          title: "Run Id"
          type: "string"
          format: "uuid"
        share_token:
          title: "Share Token"
          type: "string"
          format: "uuid"
    RunTypeEnum:
      title: "RunTypeEnum"
      enum:
        - "tool"
        - "chain"
        - "llm"
        - "retriever"
        - "embedding"
        - "prompt"
        - "parser"
      type: "string"
      description: "Enum for run types."
    RunUpdateSchema:
      title: "RunUpdateSchema"
      type: "object"
      properties:
        end_time:
          title: "End Time"
          type: "string"
          format: "date-time"
        error:
          title: "Error"
          type: "string"
        inputs:
          title: "Inputs"
          type: "object"
        outputs:
          title: "Outputs"
          type: "object"
        events:
          title: "Events"
          type: "array"
          items:
            type: "object"
    SourceType:
      title: "SourceType"
      enum:
        - "api"
        - "model"
        - "app"
      type: "string"
      description: "Enum for feedback source types."
    Task:
      title: "Task"
      required:
        - "id"
        - "tenant_id"
        - "target"
        - "args"
        - "status"
        - "created_at"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        target:
          title: "Target"
          type: "string"
        args:
          title: "Args"
          type: "object"
        result:
          title: "Result"
          type: "object"
        status:
          title: "Status"
          type: "string"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        updated_at:
          title: "Updated At"
          type: "string"
          format: "date-time"
      description: "Task schema."
    TaskCreatedResponse:
      title: "TaskCreatedResponse"
      required:
        - "id"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
      description: "Task created response."
    TaskPayload:
      title: "TaskPayload"
      required:
        - "target"
        - "args"
      type: "object"
      properties:
        target:
          title: "Target"
          type: "string"
        args:
          title: "Args"
          type: "object"
      description: "Task payload."
    Tenant:
      title: "Tenant"
      required:
        - "id"
        - "has_waitlist_access"
        - "created_at"
        - "display_name"
        - "config"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        has_waitlist_access:
          title: "Has Waitlist Access"
          type: "boolean"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        display_name:
          title: "Display Name"
          type: "string"
        config:
          $ref: "#/components/schemas/TenantConfig"
        tenant_handle:
          title: "Tenant Handle"
          type: "string"
      description: "Tenant schema."
    TenantClaimInviteCode:
      title: "TenantClaimInviteCode"
      required:
        - "code"
      type: "object"
      properties:
        code:
          title: "Code"
          type: "string"
    TenantConfig:
      title: "TenantConfig"
      type: "object"
      properties:
        is_personal:
          title: "Is Personal"
          type: "boolean"
          default: false
        max_identities:
          title: "Max Identities"
          type: "integer"
          default: 5
    TenantCreate:
      title: "TenantCreate"
      required:
        - "display_name"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        display_name:
          title: "Display Name"
          type: "string"
      description: "Creation model for the tenant."
    TenantMemberIdentity:
      title: "TenantMemberIdentity"
      required:
        - "id"
        - "tenant_id"
        - "created_at"
        - "user_id"
      type: "object"
      properties:
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        created_at:
          title: "Created At"
          type: "string"
          format: "date-time"
        user_id:
          title: "User Id"
          type: "string"
          format: "uuid"
        email:
          title: "Email"
          type: "string"
        full_name:
          title: "Full Name"
          type: "string"
        avatar_url:
          title: "Avatar Url"
          type: "string"
    TenantMembers:
      title: "TenantMembers"
      required:
        - "tenant_id"
        - "members"
        - "pending"
      type: "object"
      properties:
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        members:
          title: "Members"
          type: "array"
          items:
            $ref: "#/components/schemas/TenantMemberIdentity"
        pending:
          title: "Pending"
          type: "array"
          items:
            $ref: "#/components/schemas/PendingIdentity"
      description: "Tenant members schema."
    TenantStats:
      title: "TenantStats"
      required:
        - "tenant_id"
        - "dataset_count"
        - "tracer_session_count"
      type: "object"
      properties:
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        dataset_count:
          title: "Dataset Count"
          type: "integer"
        tracer_session_count:
          title: "Tracer Session Count"
          type: "integer"
      description: "Stats for a tenant."
    TracerSession:
      title: "TracerSession"
      required:
        - "id"
        - "tenant_id"
      type: "object"
      properties:
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        name:
          title: "Name"
          type: "string"
        default_dataset_id:
          title: "Default Dataset Id"
          type: "string"
          format: "uuid"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        run_count:
          title: "Run Count"
          type: "integer"
        run_count_reference_free:
          title: "Run Count Reference Free"
          type: "integer"
        run_count_with_reference:
          title: "Run Count With Reference"
          type: "integer"
        latency_p50:
          title: "Latency P50"
          type: "number"
          format: "time-delta"
        latency_p99:
          title: "Latency P99"
          type: "number"
          format: "time-delta"
        total_tokens:
          title: "Total Tokens"
          type: "integer"
        prompt_tokens:
          title: "Prompt Tokens"
          type: "integer"
        completion_tokens:
          title: "Completion Tokens"
          type: "integer"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
        last_run_start_time:
          title: "Last Run Start Time"
          type: "string"
          format: "date-time"
        last_run_start_time_live:
          title: "Last Run Start Time Live"
          type: "string"
          format: "date-time"
        feedback_stats:
          title: "Feedback Stats"
          type: "object"
        reference_dataset_ids:
          title: "Reference Dataset Ids"
          type: "array"
          items:
            type: "string"
            format: "uuid"
        run_facets:
          title: "Run Facets"
          type: "array"
          items:
            type: "object"
      description: "TracerSession schema."
    TracerSessionCreate:
      title: "TracerSessionCreate"
      type: "object"
      properties:
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        name:
          title: "Name"
          type: "string"
        default_dataset_id:
          title: "Default Dataset Id"
          type: "string"
          format: "uuid"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
      description: "Create class for TracerSession."
    TracerSessionWithoutVirtualFields:
      title: "TracerSessionWithoutVirtualFields"
      required:
        - "id"
        - "tenant_id"
      type: "object"
      properties:
        start_time:
          title: "Start Time"
          type: "string"
          format: "date-time"
        extra:
          title: "Extra"
          type: "object"
        name:
          title: "Name"
          type: "string"
        default_dataset_id:
          title: "Default Dataset Id"
          type: "string"
          format: "uuid"
        id:
          title: "Id"
          type: "string"
          format: "uuid"
        tenant_id:
          title: "Tenant Id"
          type: "string"
          format: "uuid"
      description: "TracerSession schema."
    ValidationError:
      title: "ValidationError"
      required:
        - "loc"
        - "msg"
        - "type"
      type: "object"
      properties:
        loc:
          title: "Location"
          type: "array"
          items:
            anyOf:
              - type: "string"
              - type: "integer"
        msg:
          title: "Message"
          type: "string"
        type:
          title: "Error Type"
          type: "string"
  securitySchemes:
    Tenant ID:
      type: "apiKey"
      in: "header"
      name: "X-Tenant-Id"
    Bearer Auth:
      type: "http"
      scheme: "bearer"
